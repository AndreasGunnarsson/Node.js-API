'use strict';
window.addEventListener('DOMContentLoaded', main);
const url = 'http://localhost:3000/';

// Saves the id of the last item edited.
const state = {
    lastEditId : undefined
}

// Function that runs when the program starts.
function main() {
    const form = document.getElementById('createForm');
    const formEdit = document.getElementById('editForm');
    const deleteAllButton = document.getElementById('deleteAllButton');
    form.addEventListener('submit', CreateNew);
    formEdit.addEventListener('submit', SubmitEdit);
    deleteAllButton.addEventListener('click', DeleteAll);
    UpdateUserInterface();
}

// Function used to update the list with all items fetched from the API.
async function UpdateUserInterface() {
    await fetch(url+'get')
        .then(response => response.json())
        .then((data) => {
            GenerateList(data);
        })
        .catch(err => console.error('Error (GET): ', err))
}

/**
 * Generates the list with items.
 * @param {Object[]} data
 */
function GenerateList(data) {
    document.getElementById('parentContainer').innerHTML = "";
    data.forEach((element) => {
        const containerElement = document.getElementById('parentContainer');

        const row = document.createElement('div');
        row.className = 'child';
        row.dataset['rowId'] = element.id;
        containerElement.appendChild(row);

        const rowElement = document.querySelector('div[data-row-id="'+element.id+'"]');
        const itemName = document.createElement('div');
        const itemAmount = document.createElement('div');
        itemName.innerText = element.name;
        itemAmount.innerText = element.amount;
        rowElement.appendChild(itemName);
        rowElement.appendChild(itemAmount);

        const buttonEdit = document.createElement('button');
        buttonEdit.innerText = 'Edit';
        buttonEdit.setAttribute('class', 'editByIdButton');
        buttonEdit.dataset['editId'] = element.id;
        rowElement.appendChild(buttonEdit);

        const buttonDelete = document.createElement('button');
        buttonDelete.innerText = 'Delete';
        buttonDelete.setAttribute('class', 'deleteByIdButton');
        buttonDelete.dataset['deleteId'] = element.id;
        rowElement.appendChild(buttonDelete);
    });

    AddEventEditButtons();
    AddEventDeleteButtons();
}

// Adds click events to the Edit buttons in the list generated by GenerateList().
function AddEventEditButtons() {
    const editButtons = document.querySelectorAll('.editByIdButton');
    for (let value of editButtons) {
        value.addEventListener('click', OpenEditForm);
    }
}

// Adds click events to the Delete buttons in the list generated by GenerateList().
function AddEventDeleteButtons() {
    const deleteIdButtons = document.querySelectorAll('.deleteByIdButton');
    for (let value of deleteIdButtons) {
        value.addEventListener('click', DeleteId);
    }
}

// Event handler that opens the form when the Edit buttom for an item is pressed.
function OpenEditForm() {
    const editForm = document.getElementById('editForm');
    const rowElement = document.querySelector('div[data-row-id="'+this.dataset['editId']+'"]');
    const inputName = document.getElementById('inputNameEdit');
    const inputAmount = document.getElementById('inputAmountEdit');
    inputName.value = rowElement.childNodes[0].innerText;
    inputAmount.value = rowElement.childNodes[1].innerText;
    editForm.style.display = 'block';
    state.lastEditId = this.dataset['editId'];
}

/**
 * Event handler when the Update button in the edit form is pressed.
 * @param {Event} event
 */
async function SubmitEdit(event) {
    event.preventDefault();
    const editForm = document.getElementById('editForm');
    const inputName = document.getElementById('inputNameEdit');
    const inputAmount = document.getElementById('inputAmountEdit');

    const req = { 'id' : state.lastEditId, 'name' : inputName.value, 'amount' : inputAmount.value };
    await fetch(url+'put', {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body : JSON.stringify(req)
    }).catch(err => console.error('Error (PUT): ', err))

    editForm.style.display = 'none';

    UpdateUserInterface();
}

/**
 * Event handler when submitting a new item.
 * @param {Event} event
 */
async function CreateNew(event) {
    event.preventDefault();
    const formInputName = document.getElementById('inputNameCreate');
    const formInputAmount = document.getElementById('inputAmountCreate');
    const req = { 'name' : formInputName.value, 'amount' : formInputAmount.value };
    await fetch(url+'post', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(req)
    }).catch(err => console.error('Error (POST): ', err))

    UpdateUserInterface();
}

// Event handler for the Delete all button.
async function DeleteAll() {
    await fetch(url+'delete', {
        method: 'DELETE'
    }).catch(err => console.error('Error (DELETE): ', err))

    UpdateUserInterface();
}

// Event handler when pressing Delete on a specific item.
async function DeleteId() {
    await fetch(url+'delete/'+this.dataset['deleteId'], {
        method: 'DELETE'
    }).catch(err => console.error('Error (DELETE): ', err))

    UpdateUserInterface();
}
